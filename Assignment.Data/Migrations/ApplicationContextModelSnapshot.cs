// <auto-generated />
using System;
using Assignment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Assignment.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Assignment.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            Name = "Cat 1"
                        },
                        new
                        {
                            CategoryId = 2L,
                            Name = "Cat 2"
                        },
                        new
                        {
                            CategoryId = 3L,
                            Name = "Cat 3"
                        },
                        new
                        {
                            CategoryId = 4L,
                            Name = "Cat 4"
                        },
                        new
                        {
                            CategoryId = 5L,
                            Name = "Cat 5"
                        },
                        new
                        {
                            CategoryId = 6L,
                            Name = "Cat 6"
                        });
                });

            modelBuilder.Entity("Assignment.Data.Entities.Product", b =>
                {
                    b.Property<long>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProductCategoryId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1L,
                            Name = "Product 1",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 2L,
                            Name = "Product 2",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 3L,
                            Name = "Product 3",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 4L,
                            Name = "Product 4",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 5L,
                            Name = "Product 5",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 6L,
                            Name = "Product 6",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 11L,
                            Name = "Product 11",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 21L,
                            Name = "Product 21",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 31L,
                            Name = "Product 31",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 41L,
                            Name = "Product 41",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 51L,
                            Name = "Product 51",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 61L,
                            Name = "Product 61",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 12L,
                            Name = "Product 12",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 22L,
                            Name = "Product 22",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 32L,
                            Name = "Product 32",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 42L,
                            Name = "Product 42",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 52L,
                            Name = "Product 52",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 62L,
                            Name = "Product 62",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 13L,
                            Name = "Product 13",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 23L,
                            Name = "Product 23",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 33L,
                            Name = "Product 33",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 43L,
                            Name = "Product 43",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 53L,
                            Name = "Product 53",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 63L,
                            Name = "Product 63",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 14L,
                            Name = "Product 14",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 24L,
                            Name = "Product 24",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 34L,
                            Name = "Product 34",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 44L,
                            Name = "Product 44",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 54L,
                            Name = "Product 54",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 64L,
                            Name = "Product 64",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 15L,
                            Name = "Product 15",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 25L,
                            Name = "Product 25",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 35L,
                            Name = "Product 35",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 45L,
                            Name = "Product 45",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 55L,
                            Name = "Product 55",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 65L,
                            Name = "Product 65",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 16L,
                            Name = "Product 16",
                            Price = 0m,
                            ProductCategoryId = 1L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 26L,
                            Name = "Product 26",
                            Price = 0m,
                            ProductCategoryId = 2L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 36L,
                            Name = "Product 36",
                            Price = 0m,
                            ProductCategoryId = 3L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 46L,
                            Name = "Product 46",
                            Price = 0m,
                            ProductCategoryId = 4L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 56L,
                            Name = "Product 56",
                            Price = 0m,
                            ProductCategoryId = 5L,
                            Quantity = 0
                        },
                        new
                        {
                            ProductId = 66L,
                            Name = "Product 66",
                            Price = 0m,
                            ProductCategoryId = 6L,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Assignment.Data.Entities.Product", b =>
                {
                    b.HasOne("Assignment.Data.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Assignment.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Assignment.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assignment.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Assignment.Data.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
